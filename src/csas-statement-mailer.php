<?php

declare(strict_types=1);

/**
 * This file is part of the CSas Statement Tools package
 *
 * https://github.com/VitexSoftware/csas-statement-tools
 *
 * (c) VÃ­tÄ›zslav DvoÅ™Ã¡k <info@vitexsoftware.cz>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace SpojeNet\CSas;

use Ease\Shared;

require_once '../vendor/autoload.php';

\define('APP_NAME', 'CSas Statement Mailer');

if (\array_key_exists(1, $argv) && $argv[1] === '-h') {
    echo 'csas-statement-mailer [email recipient,recipient2,...] [format pdf/xml] [path/to/.env]';
    echo "\n";

    exit;
}

$options = getopt('o::e::', ['output::environment::']);
\Ease\Shared::init(
    ['CSAS_API_KEY', 'CSAS_ACCESS_TOKEN', 'CSAS_ACCOUNT_IBAN'],
    \array_key_exists('environment', $options) ? $options['environment'] : '../.env',
);
$destination = \array_key_exists('output', $options) ? $options['output'] : \Ease\Shared::cfg('RESULT_FILE', 'php://stdout');
$engine = new Statementor(Shared::cfg('CSAS_ACCOUNT_IBAN'));
$engine->setScope(Shared::cfg('IMPORT_SCOPE', 'yesterday'));

if (Shared::cfg('APP_DEBUG', false)) {
    $engine->logBanner();
}

if (ApiClient::checkCertificatePresence(Shared::cfg('CERT_FILE'), true) === false) {
    $engine->addStatusMessage(sprintf(_('Certificate file %s problem'), Shared::cfg('CERT_FILE')), 'error');

    exit(1);
}

try {
    $status = 'ok';
    $exitcode = 0;
    $statements = $engine->getStatements(Shared::cfg('ACCOUNT_CURRENCY', 'CZK'), Shared::cfg('STATEMENT_LINE', 'MAIN'));
} catch (\VitexSoftware\CSas\ApiException $exc) {
    $status = $exc->getCode().': error';
    $exitcode = (int) $exc->getCode();
}

if (empty($statements) === false) {
    $downloaded = $engine->download(
        Shared::cfg('STATEMENTS_DIR', sys_get_temp_dir()),
        $statements,
        \array_key_exists(2, $argv) ? $argv[2] : Shared::cfg('STATEMENT_FORMAT', 'pdf'),
    );

    if ($downloaded) {
        $recipient = \array_key_exists(1, $argv) ? $argv[1] : Shared::cfg('STATEMENTS_TO');

        if (empty($recipient)) {
            fwrite(fopen('php://stderr', 'wb'), Shared::appName().': '._('No recipient provided! Check arguments or environment').\PHP_EOL);

            exit(1);
        }

        try {
            $mailer = new \Ease\Mailer($recipient, sprintf(_('Bank Statements %s'), Shared::cfg('ACCOUNT_NUMBER')));
            $headers = [];

            if (Shared::cfg('STATEMENTS_FROM')) {
                $headers['From'] = Shared::cfg('STATEMENTS_FROM');
            } else {
                $mailer->addStatusMessage('ğŸ’Œ  The From header not set', 'warning');
            }

            if (Shared::cfg('STATEMENTS_REPLYTO')) {
                $headers['Reply-To'] = Shared::cfg('STATEMENTS_REPLYTO');
            }

            if (Shared::cfg('STATEMENTS_CC')) {
                $headers['Cc'] = Shared::cfg('STATEMENTS_CC');
            }

            $mailer->setMailHeaders($headers);
            $mailer->addText(sprintf(_('Statements from %s to %s'), $engine->getSince()->format(Statementor::$dateFormat), $engine->getUntil()->format(Statementor::$dateFormat))."\n\n");

            foreach ($statements as $stId => $statement) {
                $mailer->addText(_('Statement').' '.(string) ($stId + 1)."\n");
                $mailer->addText("----------------------------\n");

                foreach ($statement as $statementKey => $statementValue) {
                    $mailer->addText($statementKey.': '.(\is_array($statementValue) ? implode(',', $statementValue) : (string) $statementValue)."\n");
                }

                $mailer->addText("\n");
            }

            $mailer->addText("\n".sprintf(_('Generated by %s %s.'), Shared::appName(), Shared::AppVersion())."\nhttps://github.com/Spoje-NET/csas-statement-tools");

            foreach ($downloaded as $statement) {
                $mailer->addFile($statement, mime_content_type($statement));

                if (file_exists($statement)) {
                    unlink($statement);
                }
            }

            $mailer->send();
        } catch (\Exception $exc) {
        }
    }
} else {
    $engine->addStatusMessage('no statements returned');
}

exit($exitcode);
